#!/usr/bin/env python
# SickSafetyscanners Configuration

PACKAGE='sick_safetyscanners'

from math import pi

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.const("sensor_ip", str_t, "192.168.1.10", "Sensor IP_v4 Adress, only set at startup")
gen.const("sensor_tcp_port", int_t, 2122, "Sensor TCP port constant",)

gen.const("host_ip", str_t, "192.168.1.9", "IP_v4 adress of the host, set at startup",)
gen.const("host_udp_port", int_t, 6060, "Port of the host")

gen.const("channel", int_t, 0, "Default channel")

gen.add("frame_id", str_t, 1, "Frame name of the laserscan topic", "laser_scan")

gen.add("publish_frequency", int_t, 1, "Every n_th scan will be published", 1, 1, 100)

gen.add("angle_start", double_t, 1, "Start angle for sensor in degree, if both start and end angle are 0, all angles are taken in account." ,0,-47.5,227.5)

gen.add("angle_end", double_t, 1, "End angle for sensor in degree, if both start and end angle are 0, all angles are taken in account.", 0,-47.5,227.5)

gen.add("time_offset",    double_t, 0, "An offset to add to the time stamp before publication of a scan [s].",       -0.0,     -0.25, 0.25)

gen.add("channel_enabled", bool_t, 8, "Enable Channel",True)
gen.add("general_system_state", bool_t, 8, "Publish general system state",True)
gen.add("derived_settings", bool_t, 8, "Publish derived settings",True)
gen.add("measurement_data", bool_t, 8, "Publish measurement data",True)
gen.add("intrusion_data", bool_t, 8, "Publish intrusion data",True)
gen.add("application_io_data", bool_t, 8, "Publish application io data",True)



exit(gen.generate(PACKAGE, "dynamic_reconfigure_node", "SickSafetyscannersConfiguration"))

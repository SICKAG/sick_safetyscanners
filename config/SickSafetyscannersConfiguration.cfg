#!/usr/bin/env python
# SickSafetyscanners Configuration

PACKAGE='sick_safetyscanners'

from math import pi

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("frame_id", str_t, 1, "Frame name of the laserscan topic", "scan")

gen.add("skip", int_t, 1, "The number of scans to skip between each measured scan.  For a 25Hz laser, setting 'skip' to 0 makes it publish at 25Hz, 'skip' to 1 makes it publish at 12.5Hz.", 0, 0, 100)

gen.add("angle_start", double_t, 1, "Start angle for sensor in radians, if both start and end angle are 0, all angles are taken in account." ,0, -2.3998, 2.3998)

gen.add("angle_end", double_t, 1, "End angle for sensor in radians, if both start and end angle are 0, all angles are taken in account.", 0, -2.3998, 2.3998)

gen.add("time_offset",    double_t, 0, "An offset to add to the time stamp before publication of a scan [s].", 0.0,     -0.25, 0.25)

gen.add("expected_frequency",    double_t, 0, "Expected scanner frequency.", 20.0, 0, 100)

gen.add("channel_enabled", bool_t, 8, "Enable Channel",True)
gen.add("general_system_state", bool_t, 8, "Publish general system state",True)
gen.add("derived_settings", bool_t, 8, "Publish derived settings",True)
gen.add("measurement_data", bool_t, 8, "Publish measurement data",True)
gen.add("intrusion_data", bool_t, 8, "Publish intrusion data",True)
gen.add("application_io_data", bool_t, 8, "Publish application io data",True)



exit(gen.generate(PACKAGE, "dynamic_reconfigure_node", "SickSafetyscannersConfiguration"))
